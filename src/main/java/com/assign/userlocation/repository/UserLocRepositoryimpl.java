package com.assign.userlocation.repository;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.assign.userlocation.entity.User;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
@Repository
@Transactional
public  class UserLocRepositoryimpl implements UserLocRepository {

	@PersistenceContext
    private EntityManager entityManager;
	// creating a manual queries
	@Override
	public void createTable() {
		 entityManager.createNativeQuery(
	                "CREATE TABLE IF NOT EXISTS user_location(" +
	                        "    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
	                        "    name VARCHAR(50) NOT NULL," +
	                        "    latitude DOUBLE NOT NULL," +
	                        "    longitude DOUBLE NOT NULL," +
	                        ")"
	        ).executeUpdate();

	}

	@Override
	public User save(User user) {
		 entityManager.persist(user);
	        entityManager.flush();
	        return user;
	}

	@Override
	public List<User> findNearest(Integer limit, Double latitude, Double longitude) {
		 String formula = "6371 * acos(cos(radians(:latitude)) * cos(radians(o.latitude))" +
	                " * cos(radians(o.longitude) - radians(:longitude))" +
	                " + sin(radians(:latitude)) * sin(radians(o.latitude)))";

	        return entityManager
	                .createNativeQuery(
	                        "SELECT * FROM user_location o " +
	                                "ORDER BY " + formula +
	                                " ASC LIMIT :limit",
	                        User.class)
	                .setParameter("latitude", latitude)
	                .setParameter("longitude", longitude)
	                .setParameter("limit", limit)
	                .getResultList();
	    }

	@Override
	public void deleteById(Long id) {
		  entityManager.createQuery("DELETE FROM User u WHERE u.id = :id")
          .setParameter("id", id)
          .executeUpdate();
		
	}

	@Override
	public List<User> getAllUsers() {
		// TODO Auto-generated method stub
		return entityManager.createQuery("SELECT u FROM User u",User.class).getResultList();
	}
	
	
	
	}

